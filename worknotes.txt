PRINTF

main:

	unsigned int chaine_pos_gauche;
	unsigned int chaine_pos_droite;
	liste segments_output_chaine;

	tant que chaine_pos_gauche ne pointe pas sur fin de chaine:
			chaine_pos_droite = chaine_pos_gauche;
			tant que chaine_pos_droite ne pointe pas sur caractere special:
					chaine_pos_droite++;
			push le segment actuel
			si chaine_pos_droite pointe sur fin de chaine:
				break ;
			sinon
				traiter le caractere special

	afficher la liste
	fin

traiter_caractere()
{

}

ORDRES DE MISSION DE VICTOR:

	repliquer les fichiers suivantes et adapter les fonctions pour le type "long":
		ft_itoa -> ft_ltoa
		ft_uitoa -> ft_ultoa
		octal_string -> loctal_string
		hexa_string -> lhexa_string

	repliquer les fichiers suivantes et adapter les fonctions pour le type "intmax_t / uintmax_t":
		ft_itoa -> maxitoa
		ft_uitoa -> maxuitoa
		octal_string -> maxioctal_string
		hexa_string -> maxihexa_string

	repliquer les fichiers suivantes et adapter les fonctions pour le type "size_t / ssize_t (signed size_t)":
		[...]

	ajouter les prototypes de toutes les fonctions (et pas juste les nouvelles, il en manque plein) dans ft_printf.h en les rangeant par fichiers classes par ordre ascii



	ecrire des tests pour la detection des formats
		<<(variables.c: process_format())>>


RESTE A FAIRE

	importer libft
	makefile
	fonctions liste
	detection du format
	lengthmod j et z
	INTEGRER CES PUTAINS DE LISTES A NOTRE LIBFT BORDER DE MERDE ON EN A MARRE
	ET FT_STRREV
	%p
